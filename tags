!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
already_visited	initial_path.c	/^int already_visited(int * return_data, int city_num)$/;"	f
bef_aft_distance	hasegawa.c	/^double bef_aft_distance(int * cities)$/;"	f
choice_4indexs	hasegawa.c	/^void choice_4indexs(int type, int * return_data, int * solution_path)$/;"	f
city_point	parameter.c	/^    int city_point;$/;"	m	struct:parameter	file:
create_2opt_tabulist	tabu.c	/^void create_2opt_tabulist(int tsp_size)$/;"	f
create_euclid_path	initial_path.c	/^int * create_euclid_path(int * return_data, int * euclid_data, int create_mode)$/;"	f
create_graph_path	initial_path.c	/^int * create_graph_path(int * return_data, double * graph_data, int create_mode)$/;"	f
create_mode	initial_path.c	/^int create_mode = DEFAULT;$/;"	v
error_procedure	error.c	/^void error_procedure(char * message)$/;"	f
euclid_search	hasegawa.c	/^int * euclid_search(int * solution_path)$/;"	f
exchange_branch	hasegawa.c	/^void exchange_branch(int * solution_path, int * indexs)$/;"	f
finalize	finalize.c	/^void finalize(void)$/;"	f
find_out_flag	tabu.c	/^int find_out_flag;$/;"	v
flag_set	tabu.c	/^void flag_set(void)$/;"	f
get_among	hasegawa.c	/^int get_among(int start, int end, int tsp_size)$/;"	f
get_branch_distance	hasegawa.c	/^double get_branch_distance(int a, int b)$/;"	f
get_cities_by_indexs	hasegawa.c	/^void get_cities_by_indexs(int * cities, int * indexs, int * solution_path)$/;"	f
get_distance	hasegawa.c	/^double get_distance(int a, int ad, int b, int bd)$/;"	f
get_x	main.c	/^int get_x(int city_index)$/;"	f
get_y	main.c	/^int get_y(int city_index)$/;"	f
hasegawa_search	hasegawa.c	/^int * hasegawa_search(int * solution_path)$/;"	f
help_document	argument.c	/^void help_document(char ** argv)$/;"	f
initial_euclid_path	initial_path.c	/^int * initial_euclid_path(int * euclid_data)$/;"	f
initial_graph_path	initial_path.c	/^int * initial_graph_path(double * graph_data)$/;"	f
initial_parameter	parameter.c	/^void initial_parameter(int tsp_size)$/;"	f
is_2opt_tabu	tabu.c	/^int is_2opt_tabu(int * cities1)$/;"	f
list_size	tabu.c	/^int list_size = 1;$/;"	v
loop_terminate	terminate.c	/^int loop_terminate(void)$/;"	f
main	main.c	/^int main(int argc, char ** argv)$/;"	f
main_base_data	main.c	/^int * main_base_data;$/;"	v
main_base_data	visualize.c	/^int * main_base_data;$/;"	v
make_distance	math.c	/^double make_distance(int x1, int y1, int x2, int y2)$/;"	f
make_graph	initialize.c	/^double * make_graph(int * main_base_data)$/;"	f
mallocer_dp	mallocer.c	/^double * mallocer_dp(int size)$/;"	f
mallocer_ip	mallocer.c	/^int * mallocer_ip(int size)$/;"	f
match_mutex	tabu.c	/^pthread_mutex_t match_mutex;$/;"	v
mode_select	hasegawa.c	/^int mode_select(int mode, int * solution_path)$/;"	f
next_index	hasegawa.c	/^int next_index(int target, int maximum)$/;"	f
now_index	hasegawa.c	/^int now_index(int target, int maximum)$/;"	f
option_checker	argument.c	/^void option_checker(int argc, char ** argv)$/;"	f
parameter	parameter.c	/^struct parameter {$/;"	s	file:
parameterp	parameter.c	/^struct parameter * parameterp;$/;"	v	typeref:struct:parameter
permit_worse	hasegawa.c	/^int permit_worse(int * cities, int tsp_size)$/;"	f
permit_worse	parameter.c	/^    double permit_worse;        \/* Parcentage of permitting to choice toward worse *\/$/;"	m	struct:parameter	file:
point_of_cities	hasegawa.c	/^int * point_of_cities;$/;"	v
prev_index	hasegawa.c	/^int prev_index(int target, int maximum)$/;"	f
random_num	math.c	/^int random_num(int maximum)$/;"	f
read_data	read_data.c	/^int * read_data(void)$/;"	f
read_data_set	read_data.c	/^void read_data_set(char * tspfilename)$/;"	f
readfilename	read_data.c	/^char * readfilename;$/;"	v
search	search.c	/^int * search(int * solution_path)$/;"	f
search_loop_times	parameter.c	/^int search_loop_times(int type)$/;"	f
search_terminate	terminate.c	/^int search_terminate(void)$/;"	f
search_time	parameter.c	/^    double search_time;         \/* whole program running time *\/$/;"	m	struct:parameter	file:
search_time	timer.c	/^double search_time = DEFAULT_SEARCHTIME;$/;"	v
search_times	parameter.c	/^int search_times;$/;"	v
set_city_point	parameter.c	/^void set_city_point(int * point_of_cities)$/;"	f
set_euclid_mode	parameter.c	/^void set_euclid_mode(void)$/;"	f
set_mode	parameter.c	/^void set_mode(void)$/;"	f
set_parallel_mode	parameter.c	/^void set_parallel_mode(void)$/;"	f
set_pole_mode	parameter.c	/^void set_pole_mode(void)$/;"	f
set_time	timer.c	/^void set_time(int mode, int parametor)$/;"	f
set_tozaki_mode	parameter.c	/^void set_tozaki_mode(void)$/;"	f
set_visual_mode	parameter.c	/^void set_visual_mode(void)$/;"	f
show_mode	parameter.c	/^void show_mode(void)$/;"	f
show_on_off	parameter.c	/^void show_on_off(int on_off)$/;"	f
solution_path_for_visual	main.c	/^int * solution_path_for_visual;$/;"	v
start_time	timer.c	/^double start_time;$/;"	v
tabu_matching	tabu.c	/^void tabu_matching(int * cities)$/;"	f
tabulist_2opt	tabu.c	/^int * tabulist_2opt[4];$/;"	v
timer	timer.c	/^int timer(int sign)$/;"	f
tozaki_search	tozaki.c	/^int * tozaki_search(int * solution_path)$/;"	f
tsp_size	parameter.c	/^    int tsp_size;               \/* TSP's Example Size *\/$/;"	m	struct:parameter	file:
turn_loop_times	parameter.c	/^int turn_loop_times(int type)$/;"	f
turn_times	parameter.c	/^int turn_times;$/;"	v
two_opt_search	hasegawa.c	/^int * two_opt_search(int * solution_path)$/;"	f
visualizer	visualize.c	/^void visualizer(int * visual_arg)$/;"	f
